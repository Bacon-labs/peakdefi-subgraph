enum CyclePhase {
  INTERMISSION
  MANAGE
}

enum VoteDirection {
  EMPTY
  FOR
  AGAINST
}

type FundRegistry @entity {
  id: ID! # 'FundRegistry'
  numFunds: BigInt!
  fundProxies: [String!]!
}

type Manager @entity {
  id: ID! # address
  fund: Fund!
  address: String!
  kairoBalance: BigDecimal!
  kairoBalanceWithStake: BigDecimal!
  baseStake: BigDecimal!
  riskTaken: BigDecimal!
  riskThreshold: BigDecimal!
  lastCommissionRedemption: BigInt!
  basicOrders: [BasicOrder!]!
  compoundOrders: [CompoundOrder!]!
  commissionHistory: [CommissionRedemption!]!
  totalCommissionReceived: BigDecimal!
  roiHistory: [ManagerROI!]!
  upgradeSignal: Boolean!
  votes: [VoteDirection!]!
}

type BasicOrder @entity {
  id: ID! # index in userInvestments[user] array + cycleNumber
  fund: Fund!
  idx: BigInt!
  tokenAddress: String!
  cycleNumber: BigInt!
  stake: BigDecimal!
  tokenAmount: BigDecimal!
  rawTokenAmount: BigInt!
  buyPrice: BigDecimal!
  sellPrice: BigDecimal!
  buyTime: BigInt!
  sellTime: BigInt!
  isSold: Boolean!
  owner: String!
  txHash: String! # transaction hash of order creation
}

type CompoundOrder @entity {
  id: ID! # index in userCompoundOrders[user] array + cycleNumber
  fund: Fund!
  idx: BigInt!
  tokenAddress: String!
  cycleNumber: BigInt!
  stake: BigDecimal!
  collateralAmountInDAI: BigDecimal!
  collateralRatio: BigDecimal!
  currProfit: BigDecimal!
  currCollateral: BigDecimal!
  currBorrow: BigDecimal!
  currCash: BigDecimal!
  marketCollateralFactor: BigDecimal!
  outputAmount: BigDecimal!
  buyTokenPrice: BigDecimal! # the buy price of the token being traded (e.g. ETH, WBTC)
  buyTime: BigInt!
  sellTime: BigInt!
  isSold: Boolean!
  isShort: Boolean!
  orderAddress: String!
  owner: String!
  txHash: String! # transaction hash of order creation
}

type CommissionRedemption @entity {
  id: ID! # tx hash
  fund: Fund!
  timestamp: BigInt!
  cycleNumber: BigInt!
  amountInDAI: BigDecimal!
  txHash: String!
}

type Investor @entity {
  id: ID! # address
  fund: Fund!
  address: String!
  sharesBalance: BigDecimal!
  depositWithdrawHistory: [DepositWithdraw!]!
}

type DepositWithdraw @entity {
  id: ID! # tx hash
  fund: Fund!
  timestamp: BigInt!
  isDeposit: Boolean!
  amountInDAI: BigDecimal!
  txHash: String!
}

type Fund @entity {
  id: ID! # address of BetokenProxy
  address: String!
  cycleNumber: BigInt!
  cyclePhase: CyclePhase!
  startTimeOfCyclePhase: BigInt!
  phaseLengths: [BigInt!]!
  totalFundsInDAI: BigDecimal!
  totalFundsAtPhaseStart: BigDecimal!
  kairoPrice: BigDecimal!
  kairoTotalSupply: BigDecimal!
  sharesPrice: BigDecimal!
  sharesTotalSupply: BigDecimal!
  sharesPriceHistory: [DataPoint!]!
  aum: BigDecimal!
  aumHistory: [DataPoint!]!
  cycleTotalCommission: BigDecimal!
  managers: [Manager!]!
  lastProcessedBlock: BigInt!
  cycleROIHistory: [BigDecimal!]!
  # upgrade governance related
  hasFinalizedNextVersion: Boolean!
  upgradeVotingActive: Boolean!
  nextVersion: String!
  proposers: [String!]!
  candidates: [String!]!
  forVotes: [BigDecimal!]!
  againstVotes: [BigDecimal!]!
  upgradeSignalStrength: BigDecimal!
  versionNum: BigInt!
}

type DataPoint @entity {
  id: ID! # timestamp
  timestamp: BigInt!
  value: BigDecimal!
}

type ManagerROI @entity {
  id: ID!
  fund: Fund!
  manager: String!
  cycle: BigInt!
  roi: BigDecimal!
  kairoBalance: BigDecimal!
}

type TokenPrice @entity {
  id: ID!
  tokenSymbol: String!
  tokenAddress: String!
  priceInDAI: BigDecimal!
  timestamp: BigInt!
}

type PeakStakingPool @entity {
  id: ID!
  mintedPeakTokens: BigDecimal!
  stakeAmount: BigDecimal!
  totalWithdrawnStakeReward: BigDecimal!
}

type PeakUser @entity {
  id: ID!
  address: String!
  referrer: PeakUser
  rank: BigInt!
  careerValue: BigDecimal!
  totalDaiCommissionReceived: BigDecimal!
  totalPeakCommissionReceived: BigDecimal!
  referredUsers: [PeakUser!]! @derivedFrom(field: "referrer")
  referLevelUserCounts: [BigInt!]!
  referLevelDaiCommissions: [BigDecimal!]!
  referLevelPeakCommissions: [BigDecimal!]!
  stakeAmount: BigDecimal!
  totalStakeReward: BigDecimal!
  totalWithdrawnStakeReward: BigDecimal!
  avgAPY: BigDecimal!
  stakeList: [PeakStakeEntry!]! @derivedFrom(field: "staker")
  activityHistory: [PeakActivity!]! @derivedFrom(field: "user")
}

type PeakStakeEntry @entity {
  id: ID!
  idx: BigInt!
  staker: PeakUser!
  stakeAmount: BigDecimal!
  interestAmount: BigDecimal!
  withdrawnInterestAmount: BigDecimal!
  stakeTimestamp: BigInt!
  stakeTimeInDays: BigInt!
  apy: BigDecimal!
  active: Boolean!
}

type PeakActivity @entity {
  id: ID!
  user: PeakUser!
  isStake: Boolean!
  type: String!
  timestamp: BigInt!
  txAmount: BigDecimal!
  txHash: String!
  token: String
}